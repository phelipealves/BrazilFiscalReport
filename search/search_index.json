{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#brazil-fiscal-report","title":"Brazil Fiscal Report","text":"<p>Python library for generating Brazilian auxiliary fiscal documents in PDF from XML documents.</p>"},{"location":"#supported-documents","title":"Supported Documents \ud83d\udcc4","text":"<ul> <li>DANFE - Documento Auxiliar da Nota Fiscal Eletr\u00f4nica (NF-e)</li> <li>DACCe - Documento Auxiliar da Carta de Corre\u00e7\u00e3o Eletr\u00f4nica (CC-e)</li> <li>DACTE - Documento Auxiliar do Conhecimento de Transporte Eletr\u00f4nico (CT-e)</li> <li>DAMDFE - Documento Auxiliar do Manifesto Eletr\u00f4nico de Documentos Fiscais (MDF-e)</li> </ul>"},{"location":"#usage-modes","title":"Usage Modes","text":""},{"location":"#1-cli-command-line","title":"1. CLI (Command Line)","text":"<p>For quick and easy PDF generation, use the CLI. After configuring the <code>config.yaml</code> file with the issuer details, margins, and logo, you can easily generate PDFs with a single command.</p>"},{"location":"#2-python-code","title":"2. Python Code","text":"<p>For further customization and integration, use the library directly in Python code. This mode allows you to configure margins, fonts, receipt positions, and other options tailored to your needs.</p>"},{"location":"#beta-stage-notice","title":"Beta Stage Notice \ud83d\udea7","text":"<p>This library is currently in the beta stage of development. While it has many of the intended features implemented, it is still undergoing testing and improvements. Users should note that during this phase, functionality may change and some instability may occur. We welcome feedback on any issues or suggestions for enhancements. Use in production environments should be approached with caution.</p>"},{"location":"#dependencies","title":"Dependencies \ud83d\udee0\ufe0f","text":"<ul> <li>FPDF2 - PDF creation library for Python</li> <li>phonenumbers</li> <li>python-barcode</li> <li>qrcode (required for DACTE and DAMDFE)</li> </ul>"},{"location":"#to-install","title":"To install \ud83d\udd27","text":"<pre><code>pip install brazilfiscalreport\n</code></pre>"},{"location":"#installing-dacte-with-dependencies","title":"Installing DACTE with Dependencies","text":"<p>If you specifically need the DACTE functionality, you can install it along with its required dependencies using:</p> <pre><code>pip install 'brazilfiscalreport[dacte]'\n</code></pre>"},{"location":"#installing-damdfe-with-dependencies","title":"Installing DAMDFE with Dependencies","text":"<p>If you specifically need the DAMDFE functionality, you can install it along with its required dependencies using:</p> <pre><code>pip install 'brazilfiscalreport[damdfe]'\n</code></pre>"},{"location":"#installing-cli-with-dependencies","title":"Installing CLI with Dependencies","text":"<p>If you specifically need the CLI functionality, you can install it along with its required dependencies using:</p> <pre><code>pip install 'brazilfiscalreport[cli]'\n</code></pre>"},{"location":"about/","title":"About","text":""},{"location":"about/#credits","title":"Credits \ud83d\ude4c","text":"<p>This is a fork of the nfe_utils project, originally created by Edson Bernardino.</p>"},{"location":"about/#feedback-and-support","title":"Feedback and Support \ud83d\udcec","text":"<p>For questions or support, feel free to open an issue or join the discussions in the repository.</p>"},{"location":"about/#maintainer","title":"Maintainer \ud83d\udee0\ufe0f","text":""},{"location":"cli/","title":"CLI","text":"<p>Generate DACTE, DANFE, and DACCE documents directly from the terminal. The PDF will be saved in the current directory, and you'll need to create a config.yaml file with issuer details and other configurations.</p>"},{"location":"cli/#example-of-configyaml","title":"Example of <code>config.yaml</code> \u2699\ufe0f","text":"<pre><code>ISSUER:\n  name: \"EMPRESA LTDA\"\n  address: \"AV. TEST, 100\"\n  city: \"S\u00c3O PAULO\"\n  state: \"SP\"\n  phone: \"(11) 1234-5678\"\n\nLOGO: \"/path/to/logo.jpg\"\nTOP_MARGIN: 5.0\nRIGHT_MARGIN: 5.0\nBOTTOM_MARGIN: 5.0\nLEFT_MARGIN: 5.0\n</code></pre>"},{"location":"dacce/","title":"DACCe","text":"<p>DACCe (Auxiliary Document of the Electronic Bill of Lading) is a printed version of the Electronic Bill of Lading (BL-e) used in Brazil. It simplifies the information from the electronic document, providing details like sender, receiver, cargo, and transportation.</p>"},{"location":"dacce/#using-in-python-code","title":"Using in Python Code \ud83d\udc0d","text":"<pre><code>from brazilfiscalreport.dacce import DaCCe\n\n# Path to the XML file\nxml_file_path = 'cce.xml'\n\n# Load XML Content\nwith open(xml_file_path, \"r\", encoding=\"utf8\") as file:\n    xml_content = file.read()\n\n# Instantiate the CC-e PDF object with the loaded XML content\ncce = DaCCe(xml=xml_content)\n\n# Save the generated PDF to a file\ncce.output('cce.pdf')\n</code></pre>"},{"location":"dacce/#using-in-cli","title":"Using in CLI \ud83d\udcbb","text":"<pre><code>bfrep dacce /path/to/cce_1.xml\n</code></pre>"},{"location":"dacte/","title":"DACTE","text":"<p>DACTE (Auxiliary Document of the Electronic Transportation Bill) is a printed document used in Brazil to accompany the electronic transportation invoice (CT-e). It serves as a simplified version of the CT-e, providing key details about the shipment, such as cargo information, sender and receiver, and transport company data.</p>"},{"location":"dacte/#customizing-dacte","title":"Customizing DACTE \ud83c\udfa8","text":"<p>This section describes how to customize the PDF output of the DACTE using the <code>DacteConfig</code> class. You can adjust various settings such as margins, fonts, and tax configurations according to your needs.</p>"},{"location":"dacte/#using-in-python-code","title":"Using in Python Code \ud83d\udc0d","text":"<pre><code>from brazilfiscalreport.dacte import Dacte\n\n# Path to the XML file\nxml_file_path = 'cte.xml'\n\n# Load XML Content\nwith open(xml_file_path, \"r\", encoding=\"utf8\") as file:\n    xml_content = file.read()\n\n# Instantiate the DACTE object with the loaded XML content\ndacte = Dacte(xml=xml_content)\ndacte.output('output_dacte.pdf')\n</code></pre>"},{"location":"dacte/#using-in-cli","title":"Using in CLI \ud83d\udcbb","text":"<pre><code>bfrep dacte /path/to/dacte.xml\n</code></pre>"},{"location":"dacte/#customizing-dacte_1","title":"Customizing DACTE \ud83c\udfa8","text":"<p>This section describes how to customize the PDF output of the DACTE using the <code>DacteConfig</code> class. You can adjust various settings such as margins, fonts, and tax configurations according to your needs.</p>"},{"location":"dacte/#configuration-options","title":"Configuration Options \u2699\ufe0f","text":"<p>Here is a breakdown of all the configuration options available in <code>DacteConfig</code>:</p> <p>Logo</p> <ul> <li>Type: <code>str</code>, <code>BytesIO</code>, or <code>bytes</code></li> <li>Description: Path to the logo file or binary image data to be included in the PDF. You can use a file path string or pass image data directly.</li> <li>Example:     <code>python     config.logo = \"path/to/logo.jpg\"  # Using a file path</code></li> <li>Default: No logo.</li> </ul> <p>Margins</p> <ul> <li>Type: <code>Margins</code></li> <li>Fields: <code>top</code>, <code>right</code>, <code>bottom</code>, <code>left</code> (all of type <code>Number</code>)</li> <li>Description: Sets the page margins for the PDF document.</li> <li>Example:     <code>python     config.margins = Margins(top=5, right=5, bottom=5, left=5)</code></li> <li>Default: top, right, bottom, and left are set to 5 mm.</li> </ul> <p>Font Type</p> <ul> <li>Type: <code>FontType</code> (Enum)</li> <li>Values: <code>COURIER</code>, <code>TIMES</code></li> <li>Description: Font style used throughout the PDF document.</li> <li>Example:     <code>python     config.font_type = FontType.COURIER</code></li> <li>Default: <code>TIMES</code></li> </ul> <p>Display PIS COFINS</p> <ul> <li>Type: <code>Bool</code></li> <li>Values: <code>True</code>, <code>False</code></li> <li>Description: Whether or not to display PIS and COFINS taxes in the DACTE totals.</li> <li>Example:     <code>python     config.display_pis_cofins = True</code></li> <li>Default: <code>False</code></li> </ul>"},{"location":"dacte/#usage-example-with-customization","title":"Usage Example with Customization","text":"<p>Here\u2019s how to set up a DacteConfig object with a full set of customizations:</p> <pre><code>from brazilfiscalreport.dacte import (\n    Dacte,\n    DacteConfig,\n    FontType,\n    Margins,\n)\n\n# Path to the XML file\nxml_file_path = 'cte.xml'\n\n# Load XML Content\nwith open(xml_file_path, \"r\", encoding=\"utf8\") as file:\n    xml_content = file.read()\n\n# Create a configuration instance\nconfig = DacteConfig(\n    logo='path/to/logo.png',\n    margins=Margins(top=10, right=10, bottom=10, left=10),\n    font_type=FontType.TIMES\n)\n\n# Use this config when creating a Dacte instance\ndacte = Dacte(xml_content, config=config)\ndacte.output('output_dacte.pdf')\n</code></pre>"},{"location":"damdfe/","title":"DAMDFE","text":"<p>DAMDFE (Auxiliary Document of the Electronic Invoice for Retail) is a printed version of the Electronic Retail Invoice (NF-e) in Brazil. It contains key information about the transaction, such as the seller, buyer, and item details, and is used as proof of purchase.</p>"},{"location":"damdfe/#using-in-python-code","title":"Using in Python Code \ud83d\udc0d","text":"<pre><code>from brazilfiscalreport.damdfe import Damdfe\n\n# Path to the XML file\nxml_file_path = 'damdfe.xml'\n\n# Load XML Content\nwith open(xml_file_path, \"r\", encoding=\"utf8\") as file:\n    xml_content = file.read()\n\n# Instantiate the DAMDFE object with the loaded XML content\ndamdfe = Damdfe(xml=xml_content)\n\n# Save the generated PDF to a file\ndamdfe.output('damdfe.pdf')\n</code></pre>"},{"location":"damdfe/#using-in-cli","title":"Using in CLI \ud83d\udcbb","text":"<pre><code>bfrep damdfe /path/to/cce_1.xml\n</code></pre>"},{"location":"damdfe/#customizing-damdfe","title":"Customizing DAMDFE \ud83c\udfa8","text":"<p>This section describes how to customize the PDF output of the DAMDFE using the <code>DamdfeConfig</code> class. You can adjust various settings such as margins, fonts, and tax configurations according to your needs.</p>"},{"location":"damdfe/#configuration-options","title":"Configuration Options \u2699\ufe0f","text":"<p>Here is a breakdown of all the configuration options available in <code>DamdfeConfig</code>:</p> <p>Logo</p> <ul> <li>Type: <code>str</code>, <code>BytesIO</code>, or <code>bytes</code></li> <li>Description: Path to the logo file or binary image data to be included in the PDF. You can use a file path string or pass image data directly.</li> <li>Example:     <code>python     config.logo = \"path/to/logo.jpg\"  # Using a file path</code></li> <li>Default: No logo.</li> </ul> <p>Margins</p> <ul> <li>Type: <code>Margins</code></li> <li>Fields: <code>top</code>, <code>right</code>, <code>bottom</code>, <code>left</code> (all of type <code>Number</code>)</li> <li>Description: Sets the page margins for the PDF document.</li> <li>Example:     <code>python     config.margins = Margins(top=10, right=10, bottom=10, left=10)</code></li> <li>Default: top, right, bottom, and left are set to 5 mm.</li> </ul> <p>Font Type</p> <ul> <li>Type: <code>FontType</code> (Enum)</li> <li>Values: <code>COURIER</code>, <code>TIMES</code></li> <li>Description: Font style used throughout the PDF document.</li> <li>Example:     <code>python     config.font_type = FontType.COURIER</code></li> <li>Default: <code>TIMES</code></li> </ul>"},{"location":"damdfe/#usage-example-with-customization","title":"Usage Example with Customization","text":"<p>Here\u2019s how to set up a DamdfeConfig object with a full set of customizations:</p> <pre><code>from brazilfiscalreport.damdfe import (\n    Damdfe,\n    DamdfeConfig,\n    FontType,\n    Margins,\n)\n\n# Path to the XML file\nxml_file_path = 'mdf-e.xml'\n\n# Load XML Content\nwith open(xml_file_path, \"r\", encoding=\"utf8\") as file:\n    xml_content = file.read()\n\n# Create a configuration instance\nconfig = DamdfeConfig(\n    logo='path/to/logo.png',\n    margins=Margins(top=10, right=10, bottom=10, left=10),\n    font_type=FontType.TIMES\n)\n\n# Use this config when creating a Damdfe instance\ndamdfe = Damdfe(xml_content, config=config)\ndamdfe.output('output_damdfe.pdf')\n</code></pre>"},{"location":"danfe/","title":"DANFE","text":"<p>DANFE (Auxiliary Document of the Electronic Invoice) is a printed representation of the NF-e (Electronic Invoice) used in Brazil. It contains key details about the transaction, such as the seller, buyer, products, and taxes.</p>"},{"location":"danfe/#using-in-python-code","title":"Using in Python Code \ud83d\udc0d","text":"<pre><code>from brazilfiscalreport.danfe import Danfe\n\n# Path to the XML file\nxml_file_path = 'nfe.xml'\n\n# Load XML Content\nwith open(xml_file_path, \"r\", encoding=\"utf8\") as file:\n    xml_content = file.read()\n\n# Instantiate the DANFE object with the loaded XML content\ndanfe = Danfe(xml=xml_content)\ndanfe.output('output_danfe.pdf')\n</code></pre>"},{"location":"danfe/#using-in-cli","title":"Using in CLI \ud83d\udcbb","text":"<pre><code>bfrep danfe /path/to/nfe.xml\n</code></pre>"},{"location":"danfe/#customizing-danfe","title":"Customizing DANFE \ud83c\udfa8","text":"<p>This section describes how to customize the PDF output of the DANFE using the <code>DanfeConfig</code> class. You can adjust various settings such as margins, fonts, and tax configurations according to your needs.</p>"},{"location":"danfe/#configuration-options","title":"Configuration Options \u2699\ufe0f","text":"<p>Here is a breakdown of all the configuration options available in <code>DanfeConfig</code>:</p> <p>Logo</p> <ul> <li>Type: <code>str</code>, <code>BytesIO</code>, or <code>bytes</code></li> <li>Description: Path to the logo file or binary image data to be included in the PDF. You can use a file path string or pass image data directly.</li> <li>Example:     <code>python     config.logo = \"path/to/logo.jpg\"  # Using a file path</code></li> <li>Default: No logo.</li> </ul> <p>Margins</p> <ul> <li>Type: <code>Margins</code></li> <li>Fields: <code>top</code>, <code>right</code>, <code>bottom</code>, <code>left</code> (all of type <code>Number</code>)</li> <li>Description: Sets the page margins for the PDF document.</li> <li>Example:     <code>python     config.margins = Margins(top=5, right=5, bottom=5, left=5)</code></li> <li>Default: top, right, bottom, and left are set to 5 mm.</li> </ul> <p>Font Type</p> <ul> <li>Type: <code>FontType</code> (Enum)</li> <li>Values: <code>COURIER</code>, <code>TIMES</code></li> <li>Description: Font style used throughout the PDF document.</li> <li>Example:     <code>python     config.font_type = FontType.COURIER</code></li> <li>Default: <code>TIMES</code></li> </ul> <p>Receipt Position</p> <ul> <li>Type: <code>ReceiptPosition</code> (Enum)</li> <li>Values: <code>TOP</code>, <code>BOTTOM</code>, <code>LEFT</code></li> <li>Description: Position of the receipt section in the DANFE.</li> <li>Example:     <code>python     config.receipt_pos = ReceiptPosition.BOTTOM</code></li> <li>Default: <code>TOP</code> when portrait, <code>LEFT</code> when landscape orientation.</li> <li>Note: In landscape orientation, the receipt position is far left; customization is not permitted.</li> </ul> <p>Decimal Configuration</p> <ul> <li>Type: <code>DecimalConfig</code></li> <li>Fields: <code>price_precision</code>, <code>quantity_precision</code> (both <code>int</code>)</li> <li>Description: Defines the number of decimal places for prices and quantities.</li> <li>Example:     <code>python     config.decimal_config = DecimalConfig(price_precision=2, quantity_precision=2)</code></li> <li>Default: <code>4</code></li> </ul> <p>Tax Configuration</p> <ul> <li>Type: <code>TaxConfiguration</code> (Enum)</li> <li>Values: <code>STANDARD_ICMS_IPI</code>, <code>ICMS_ST_ONLY</code>, <code>WITHOUT_IPI</code></li> <li>Description: Specifies which tax fields to display.</li> <li>Example:     <code>python     config.tax_configuration = TaxConfiguration.WITHOUT_IPI</code></li> <li>Default: <code>STANDARD_ICMS_IPI</code></li> <li>Warning: This feature is not yet implemented.</li> </ul> <p>Invoice Display</p> <ul> <li>Type: <code>InvoiceDisplay</code> (Enum)</li> <li>Values: <code>DUPLICATES_ONLY</code>, <code>FULL_DETAILS</code></li> <li>Description: Controls the level of detail in the invoice section of the DANFE.</li> <li>Example:     <code>python     config.invoice_display = InvoiceDisplay.FULL_DETAILS</code></li> <li>Default: <code>FULL_DETAILS</code></li> </ul> <p>Display PIS COFINS</p> <ul> <li>Type: <code>Bool</code></li> <li>Values: <code>True</code>, <code>False</code></li> <li>Description: Whether or not to display PIS and COFINS taxes in the DANFE totals.</li> <li>Example:     <code>python     config.display_pis_cofins = True</code></li> <li>Default: <code>False</code></li> </ul> <p>Product Description Config</p> <ul> <li>Type: <code>ProductDescriptionConfig</code></li> <li>Fields: <code>display_branch</code>, <code>branch_info_prefix</code>, <code>display_additional_info</code>, <code>display_anp</code> and <code>display_anvisa</code>.</li> <li>Description: Whether or not to display the product branch in the DANFE product description.</li> <li>Example:     <code>python     config.display_branch = True     config.branch_info_prefix = '=&gt;'     config.display_additional_info = True     config.display_anp = True     config.display_anvisa = True</code></li> <li>Default:     <code>python     config.display_branch = False     config.branch_info_prefix = \"\"     config.display_additional_info = True     config.display_anp = False     config.display_anvisa = False</code></li> </ul>"},{"location":"danfe/#usage-example-with-customization","title":"Usage Example with Customization","text":"<p>Here\u2019s how to set up a <code>DanfeConfig</code> object with a full set of customizations::</p> <pre><code>from brazilfiscalreport.danfe import (\n    Danfe,\n    DanfeConfig,\n    DecimalConfig,\n    FontType,\n    InvoiceDisplay,\n    Margins,\n    ReceiptPosition,\n    TaxConfiguration,\n)\n\n# Path to the XML file\nxml_file_path = 'nfe.xml'\n\n# Load XML Content\nwith open(xml_file_path, \"r\", encoding=\"utf8\") as file:\n    xml_content = file.read()\n\n# Create a configuration instance\nconfig = DanfeConfig(\n    logo='path/to/logo.png',\n    margins=Margins(top=10, right=10, bottom=10, left=10),\n    receipt_pos=ReceiptPosition.BOTTOM,\n    decimal_config=DecimalConfig(price_precision=2, quantity_precision=2),\n    tax_configuration=TaxConfiguration.ICMS_ST,\n    invoice_display=InvoiceDisplay.FULL_DETAILS,\n    font_type=FontType.TIMES\n)\n\n# Use this config when creating a Danfe instance\ndanfe = Danfe(xml_content, config=config)\ndanfe.output('output_danfe.pdf')\n</code></pre>"}]}